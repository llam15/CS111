Name: Leslie Lam
UCLA ID: 804302387

Collaborators: Lynn Hao Tran, Stella Chung

-------------------------------------------------------------------------------

Response to Exercise 1: 

No, sys_getpid() will not return the correct value. The call to
schedule will run the next runnable process, which eventually returns
to the original process that called sys_getpid(). However,
sys_getpid() only returns what is in the %eax register, and the state
of this register is not guaranteed. It will not necessarily be the
process's pid. 


Response to Exercise 2: 
Code and comments can be found in do_fork() and copy_stack() in
mpos-kern.c

Response to Exercise 3:
In mpos-kern.h, I added a new descriptor called p_wait. This contains
the pid of the the process (if any) that is waiting on the current
process. This variable is initialized to 0. It is set in INT_SYS_WAIT
to the pid of the calling function. Then, in INT_SYS_EXIT, it checks
to see if p_wait is nonzero, that is, if there is a function
waiting. If so, then INT_SYS_EXIT wakes the sleeping process and sets
the eax register to the appopriate return value.

Response to Exercise 4:
In INT_SYS_WAIT, under the else if statement that checks if the
process state is P_ZOMBIE, I kill zombie processes by setting their
p_state to P_EMPTY.


Anything else you'd like us to know:



Extra credit exercises:
Response to Exercise 5:

  int x = 0;
  volatile int * ptr = &x; // Creates a pointer to volatile int
  int * volatile ptr2 = &x; // Creates a volatile pointer
  pid_t p = sys_fork();
  if (p == 0){
    ptr2 = (int * volatile) ptr; // Allows ptr2 to edit parent's x 
    *ptr = 1;
    *ptr2 = 1;
  }
  else if (p > 0)
    sys_wait(p);
  app_printf("%d",x);
  sys_exit(0);


Response to Exercise 6:

Defined INT_SYS_THREAD = 53 at mpos.h:17
Added function sys_newthread at mpos-app.h:27
Declared do_thread function at mpos-kern.c:129
Added INT_SYS_THREAD case at mpos-kern.c:145
Added do_thread function at mpos-kern.c:232


Response to Exercise 7:

Defined INT_SYS_KILL = 54 at mpos.h:18
Add function sys_kill at mpos-app.h:46
Declared do_kill function at mpos-kern.c:130
Added INT_SYS_KILL case at mpos-kern.c:149
Added do_kill function at mpos-kern.c:269
Added to run_child() function in mpos-app2.c
